<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sap.cloud.sample</groupId>
      <artifactId>hello-world-retest</artifactId>
  <packaging>war</packaging>
    <version>1.0.0</version>
   
    <description>This is the parent for the samples.</description>

    <licenses>
        <license>
            <name>SAP DEVELOPER LICENSE AGREEMENT</name>
            <url>https://tools.hana.ondemand.com/developer-license-3.1.txt</url>
        </license>
    </licenses>

      <properties>

    <sap.cloud.api>${env.CF_API}</sap.cloud.api>
    <sap.cloud.org>${env.CF_ORGANIZATION}</sap.cloud.org>
    <sap.cloud.space>${env.CF_SPACE}</sap.cloud.space>
    <sap.cloud.username>${env.CF_USERNAME}</sap.cloud.username>
    <sap.cloud.password>${env.CF_PASSWORD}</sap.cloud.password>
             <!-- Property setting source encoding to UTF-8 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

  </properties>
     
        

        
    <dependencies>
                <!-- Required for testing -->
       <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency> 
        <dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>servlet-api</artifactId>
    <version>2.5</version>
    <scope>provided</scope>
</dependency> 
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
      <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.1</version>
            <scope>test</scope>
        </dependency> 

        <!-- Required for integration testing -->
        <dependency>
            <groupId>httpunit</groupId>
            <artifactId>httpunit</artifactId>
            <version>1.6.2</version> 
            <scope>test</scope>
        </dependency>
     <!--   <dependency>
            <groupId>xerces</groupId>
            <artifactId>xmlParserAPIs</artifactId>
            <version>2.2.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.6.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>nekohtml</groupId>
            <artifactId>nekohtml</artifactId>
            <version>0.9.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>rhino</groupId>
            <artifactId>js</artifactId>
            <version>1.6R5</version>
            <scope>test</scope>
        </dependency> -->
    </dependencies>

    <build>
        <!-- Map the Eclipse file system layout to the Maven plug-ins -->
        <sourceDirectory>${project.basedir}/src</sourceDirectory>
        <testSourceDirectory>${project.basedir}/test</testSourceDirectory>
        <outputDirectory>${project.basedir}/war/WEB-INF/classes</outputDirectory>
        <testOutputDirectory>${project.basedir}/bin/classes</testOutputDirectory>
        <resources>
            <resource>
                <directory>${project.basedir}/src</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${project.basedir}/test</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </testResource>
        </testResources>

        <plugins>
            <!-- Map the Eclipse file system layout to the Maven plug-ins -->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1</version>
                <configuration>
                    <warName>${project.artifactId}</warName>
                    <warSourceDirectory>WebContent</warSourceDirectory>
                    <archive>
                        <manifestFile>WebContent/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <!-- Set compiler to officially supported JDK version for the given SAP Cloud Platform SDK for Neo environment -->
           <!--   <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${sap.cloud.jdk.version}</source>
                    <target>${sap.cloud.jdk.version}</target>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin> -->

            <!-- Include only unit tests for maven-surefire-plugin that is run in test phase -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.12</version>
                <configuration>
                    <excludes>
                        <exclude>**/integrationtest/**/*Test.java</exclude>
                    </excludes>
                    <includes>
                        <include>**/test/**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>

            <!-- Include only integration tests for maven-failsafe-plugin that is run in integration-test phase -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.12</version>
                <configuration>
                    <excludes>
                        <exclude>**/test/**/*Test.java</exclude>
                    </excludes>
                    <includes>
                        <include>**/integrationtest/**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>

            <!-- Enforce officially supported JDK and validated Maven version or higher -->
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>[${sap.cloud.jdk.version},2.0)</version>
                                </requireJavaVersion>
                                <requireMavenVersion>
                                    <version>[3.0.3, 4.0.0)</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- Define the version of the Maven Plugin for SAP Cloud Platform we want to use -->
                <plugin>
                    <groupId>com.sap.cloud</groupId>
                    <artifactId>${sap.cloud.sdk.plugin}</artifactId>
                    <version>${sap.cloud.sdk.version}</version>
                </plugin>

                <!-- Force m2e to ignore plugin goal that it doesn't support naturally -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.apache.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-enforcer-plugin
                                        </artifactId>
                                        <versionRange>
                                            [0.0.1,)
                                        </versionRange>
                                        <goals>
                                            <goal>enforce</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <!-- Skip integration tests for the parent project -->
               <!-- Activate compiler warnings when matching JDK is present (compiler then doesn't generate bootstrap warnings) -->

        <!-- The cloud integration tests will stop a currently running sample application (cleanup-cloud-application), deploy 
            the sample application (deploy-cloud-application), allow samples to run sample specific application configurations (prepare-cloud-application), 
            start the cloud application and wait for it to become available (start-cloud-application), run the integration tests with 
            the maven-failsafe-plugin (execute-cloud-integration-tests) and finally stop the cloud application (stop-cloud-application) -->
        <!-- Note that you need to provide Maven properties sap.cloud.account, sap.cloud.username, and sap.cloud.password 
            for the operations to pass successfully and https.proxyHost and possibly https.proxyPort if you have a proxy! -->
        <profile>
      <id>cloud-integration-tests</id>
      <build>
        <finalName>hello-world</finalName>
        <plugins>
          
    <plugin>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.0.0</version>
      <configuration>
      <warSourceDirectory>WebContent</warSourceDirectory>
      <outputDirectory>/tmp</outputDirectory>
      </configuration>
  </plugin>
          <plugin>
            <groupId>org.cloudfoundry</groupId>
            <artifactId>cf-maven-plugin</artifactId>
            <version>1.0.4</version>
            <configuration>
              <target>${sap.cloud.api}</target>
              <username>${sap.cloud.username}</username>
              <password>${sap.cloud.password}</password>
              <space>${sap.cloud.space}</space>
              <org>${sap.cloud.org}</org>
              <appname>hello-world-retest-ashok</appname>
              
                           </configuration>
            <executions>
              <execution>
                <id>deploying-application</id>
                <phase>package</phase>
                <goals>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>        
    </profiles>
</project>
